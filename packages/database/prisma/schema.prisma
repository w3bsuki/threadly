// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  output          = "../generated/client"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// User model extended for marketplace functionality
model User {
  id             String   @id @default(cuid())
  clerkId        String   @unique
  email          String   @unique
  firstName      String?
  lastName       String?
  imageUrl       String?
  bio            String?
  location       String?
  joinedAt       DateTime @default(now())
  verified       Boolean  @default(false)
  totalSales     Int      @default(0)
  totalPurchases Int      @default(0)
  averageRating  Float?

  // Relations
  listings         Product[]
  purchases        Order[]    @relation("Buyer")
  sales            Order[]    @relation("Seller")
  reviews          Review[]   @relation("Reviewer")
  receivedReviews  Review[]   @relation("Reviewed")
  sentMessages     Message[]  @relation("Sender")
  receivedMessages Message[]  @relation("Receiver")
  favorites        Favorite[]
  cart             CartItem[]
  following        Follow[]   @relation("Follower")
  followers        Follow[]   @relation("Following")

  @@index([clerkId])
  @@index([email])
}

// Product model for marketplace items
model Product {
  id          String        @id @default(cuid())
  title       String
  description String
  price       Float
  condition   Condition
  size        String?
  brand       String?
  color       String?
  categoryId  String
  sellerId    String
  status      ProductStatus @default(AVAILABLE)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  views       Int           @default(0)

  // Relations
  seller    User           @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  category  Category       @relation(fields: [categoryId], references: [id])
  images    ProductImage[]
  favorites Favorite[]
  cartItems CartItem[]
  orders    Order[]
  messages  Message[]

  @@index([sellerId])
  @@index([categoryId])
  @@index([status])
  @@index([createdAt])
  @@index([price])
}

// Product images
model ProductImage {
  id        String  @id @default(cuid())
  productId String
  imageUrl  String
  alt       String?
  order     Int     @default(0)

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

// Category hierarchy for organizing products
model Category {
  id       String  @id @default(cuid())
  name     String  @unique
  slug     String  @unique
  parentId String?
  imageUrl String?

  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  children Category[] @relation("CategoryHierarchy")
  products Product[]

  @@index([slug])
  @@index([parentId])
}

// Orders for purchases
model Order {
  id             String      @id @default(cuid())
  buyerId        String
  sellerId       String
  productId      String
  amount         Float
  status         OrderStatus @default(PENDING)
  createdAt      DateTime    @default(now())
  shippedAt      DateTime?
  deliveredAt    DateTime?
  trackingNumber String?

  buyer   User     @relation("Buyer", fields: [buyerId], references: [id])
  seller  User     @relation("Seller", fields: [sellerId], references: [id])
  product Product  @relation(fields: [productId], references: [id])
  payment Payment?
  review  Review?

  @@index([buyerId])
  @@index([sellerId])
  @@index([productId])
  @@index([status])
  @@index([createdAt])
}

// Payment information
model Payment {
  id              String   @id @default(cuid())
  orderId         String   @unique
  stripePaymentId String   @unique
  amount          Float
  status          String
  createdAt       DateTime @default(now())

  order Order @relation(fields: [orderId], references: [id])

  @@index([stripePaymentId])
}

// Messages between users
model Message {
  id         String    @id @default(cuid())
  senderId   String
  receiverId String
  productId  String?
  content    String
  imageUrl   String?
  createdAt  DateTime  @default(now())
  readAt     DateTime?

  sender   User     @relation("Sender", fields: [senderId], references: [id])
  receiver User     @relation("Receiver", fields: [receiverId], references: [id])
  product  Product? @relation(fields: [productId], references: [id])

  @@index([senderId])
  @@index([receiverId])
  @@index([productId])
  @@index([createdAt])
}

// User reviews
model Review {
  id         String   @id @default(cuid())
  orderId    String   @unique
  reviewerId String
  reviewedId String
  rating     Int // 1-5 stars
  comment    String?
  createdAt  DateTime @default(now())

  order    Order @relation(fields: [orderId], references: [id])
  reviewer User  @relation("Reviewer", fields: [reviewerId], references: [id])
  reviewed User  @relation("Reviewed", fields: [reviewedId], references: [id])

  @@index([reviewerId])
  @@index([reviewedId])
  @@index([rating])
}

// User favorites/wishlist
model Favorite {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([userId])
  @@index([productId])
}

// Shopping cart items
model CartItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([userId])
  @@index([productId])
}

// User following system
model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  follower  User @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

// Enums
enum Condition {
  NEW_WITH_TAGS
  NEW_WITHOUT_TAGS
  VERY_GOOD
  GOOD
  SATISFACTORY
}

enum ProductStatus {
  AVAILABLE
  SOLD
  RESERVED
  REMOVED
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
  DISPUTED
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  output          = "../generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model extended for marketplace functionality
model User {
  id                      String    @id @default(cuid())
  clerkId                 String    @unique
  email                   String    @unique
  firstName               String?
  lastName                String?
  imageUrl                String?
  bio                     String?
  location                String?
  joinedAt                DateTime  @default(now())
  verified                Boolean   @default(false)
  totalSales              Int       @default(0)
  totalPurchases          Int       @default(0)
  averageRating           Float?
  stripeAccountId         String?   @unique
  notificationPreferences String?
  role                    UserRole  @default(USER)
  suspended               Boolean   @default(false)
  suspendedAt             DateTime?
  suspendedReason         String?
  
  // Seller payout fields
  sellerBalance           Decimal   @default(0) @db.Decimal(10, 2)
  bankAccountNumber       String?
  bankRoutingNumber       String?
  accountHolderName       String?
  payoutMethod            PayoutMethod? @default(BANK_TRANSFER)
  minPayoutAmount         Decimal   @default(20) @db.Decimal(10, 2)

  // Relations
  listings            Product[]
  purchases           Order[]         @relation("Buyer")
  sales               Order[]         @relation("Seller")
  reviews             Review[]        @relation("Reviewer")
  receivedReviews     Review[]        @relation("Reviewed")
  sentMessages        Message[]       @relation("SentMessages")
  buyerConversations  Conversation[]  @relation("BuyerConversations")
  sellerConversations Conversation[]  @relation("SellerConversations")
  favorites           Favorite[]
  cart                CartItem[]
  following           Follow[]        @relation("Follower")
  followers           Follow[]        @relation("Following")
  notifications       Notification[]
  addresses           Address[]
  reports             Report[]        @relation("Reporter")
  reportsAbout        Report[]        @relation("ReportedUser")
  savedSearches       SavedSearch[]
  searchHistory       SearchHistory[]
  payouts             Payout[]

  preferences         UserPreferences?
  sellerProfile       SellerProfile?

  @@index([clerkId])
  @@index([email])
}

// User preferences for onboarding and personalization
model UserPreferences {
  id              String               @id @default(cuid())
  userId          String               @unique
  preferredRole   UserPreferenceRole   @default(BUYER)
  interests       String[]             // Product categories of interest
  favoriteBrands  String[]             // Preferred brands
  location        String?              // Location for local deals
  onboardingCompleted Boolean         @default(false)
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  // Relations
  user            User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// Product model for marketplace items
model Product {
  id          String        @id @default(cuid())
  title       String
  description String
  price       Decimal       @db.Decimal(10, 2)
  condition   Condition
  size        String?
  brand       String?
  color       String?
  categoryId  String
  sellerId    String
  status      ProductStatus @default(AVAILABLE)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  views       Int           @default(0)

  // Relations
  seller        User           @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  category      Category       @relation(fields: [categoryId], references: [id])
  images        ProductImage[]
  favorites     Favorite[]
  cartItems     CartItem[]
  orders        Order[]
  conversations Conversation[]
  reports       Report[]

  @@index([sellerId])
  @@index([categoryId])
  @@index([status])
  @@index([createdAt])
  @@index([views, createdAt])
  @@index([status, views])
  @@index([status, createdAt])
  @@index([status, categoryId, createdAt])
  @@index([price])
  @@index([brand])
  @@index([condition])
}

// Product images
model ProductImage {
  id           String  @id @default(cuid())
  productId    String
  imageUrl     String
  alt          String?
  displayOrder Int     @default(0)

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

// Category hierarchy for organizing products
model Category {
  id       String  @id @default(cuid())
  name     String  @unique
  slug     String  @unique
  parentId String?
  imageUrl String?

  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  children Category[] @relation("CategoryHierarchy")
  products Product[]

  @@index([slug])
  @@index([parentId])
}

// Orders for purchases
model Order {
  id                String      @id @default(cuid())
  buyerId           String
  sellerId          String
  productId         String
  amount            Decimal     @db.Decimal(10, 2)
  status            OrderStatus @default(PENDING)
  createdAt         DateTime    @default(now())
  shippedAt         DateTime?
  deliveredAt       DateTime?
  trackingNumber    String?
  shippingAddressId String

  buyer           User     @relation("Buyer", fields: [buyerId], references: [id], onDelete: Restrict)
  seller          User     @relation("Seller", fields: [sellerId], references: [id], onDelete: Restrict)
  product         Product  @relation(fields: [productId], references: [id], onDelete: Restrict)
  shippingAddress Address  @relation(fields: [shippingAddressId], references: [id], onDelete: Restrict)
  payment         Payment?
  review          Review?

  @@index([buyerId])
  @@index([sellerId])
  @@index([productId])
  @@index([status])
  @@index([createdAt])
  @@index([buyerId, status])
  @@index([sellerId, status])
  @@index([status, createdAt])
  @@index([amount])
  @@index([shippingAddressId])
}

// Payment information
model Payment {
  id              String   @id @default(cuid())
  orderId         String   @unique
  stripePaymentId String   @unique
  amount          Decimal  @db.Decimal(10, 2)
  status          String
  createdAt       DateTime @default(now())

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([stripePaymentId])
}

// Conversations between buyers and sellers
model Conversation {
  id        String             @id @default(cuid())
  buyerId   String
  sellerId  String
  productId String
  status    ConversationStatus @default(ACTIVE)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  buyer    User      @relation("BuyerConversations", fields: [buyerId], references: [id], onDelete: Restrict)
  seller   User      @relation("SellerConversations", fields: [sellerId], references: [id], onDelete: Restrict)
  product  Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  messages Message[]

  @@unique([buyerId, sellerId, productId])
  @@index([buyerId])
  @@index([sellerId])
  @@index([productId])
  @@index([updatedAt])
  @@index([buyerId, updatedAt])
  @@index([sellerId, updatedAt])
  @@index([status, updatedAt])
}

// Messages between users
model Message {
  id             String   @id @default(cuid())
  conversationId String
  senderId       String
  content        String
  imageUrl       String?
  read           Boolean  @default(false)
  createdAt      DateTime @default(now())

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender       User         @relation("SentMessages", fields: [senderId], references: [id], onDelete: Restrict)

  @@index([conversationId])
  @@index([senderId])
  @@index([createdAt])
  @@index([read])
  @@index([conversationId, createdAt])
  @@index([senderId, createdAt])
  @@index([conversationId, read])
  @@index([read, createdAt])
}

// User reviews
model Review {
  id         String   @id @default(cuid())
  orderId    String   @unique
  reviewerId String
  reviewedId String
  rating     Int // 1-5 stars
  comment    String?
  createdAt  DateTime @default(now())

  order    Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  reviewer User  @relation("Reviewer", fields: [reviewerId], references: [id], onDelete: Restrict)
  reviewed User  @relation("Reviewed", fields: [reviewedId], references: [id], onDelete: Restrict)

  @@index([reviewerId])
  @@index([reviewedId])
  @@index([rating])
}

// User favorites/wishlist
model Favorite {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([userId])
  @@index([productId])
}

// Shopping cart items
model CartItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([userId])
  @@index([productId])
  @@index([updatedAt])
}

// User following system
model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  follower  User @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

// Notifications
model Notification {
  id        String           @id @default(cuid())
  userId    String
  title     String
  message   String
  type      NotificationType
  metadata  String           @default("{}")
  read      Boolean          @default(false)
  readAt    DateTime?
  createdAt DateTime         @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([read])
  @@index([createdAt])
}

// User addresses for shipping
model Address {
  id          String      @id @default(cuid())
  userId      String
  firstName   String
  lastName    String
  company     String?
  streetLine1 String
  streetLine2 String?
  city        String
  state       String
  zipCode     String
  country     String      @default("US")
  phone       String?
  isDefault   Boolean     @default(false)
  type        AddressType @default(SHIPPING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders Order[]

  @@index([userId])
  @@index([isDefault])
  @@index([type])
}

// Report system for content moderation
model Report {
  id             String       @id @default(cuid())
  reporterId     String
  type           ReportType
  status         ReportStatus @default(PENDING)
  reason         String
  description    String?
  productId      String?
  reportedUserId String?
  messageId      String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  resolvedAt     DateTime?
  resolvedBy     String?
  resolution     String?

  // Relations
  reporter     User     @relation("Reporter", fields: [reporterId], references: [id], onDelete: Cascade)
  product      Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  reportedUser User?    @relation("ReportedUser", fields: [reportedUserId], references: [id], onDelete: Cascade)

  @@index([reporterId])
  @@index([status])
  @@index([type])
  @@index([createdAt])
  @@index([productId])
  @@index([reportedUserId])
}

// Saved searches for alerts
model SavedSearch {
  id            String    @id @default(cuid())
  userId        String
  name          String
  query         String
  filters       Json? // Store filter state (categories, price range, etc.)
  alertEnabled  Boolean   @default(true)
  lastAlertSent DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([alertEnabled])
  @@index([createdAt])
}

// Search history for suggestions
model SearchHistory {
  id          String   @id @default(cuid())
  userId      String
  query       String
  filters     Json?
  resultCount Int      @default(0)
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([query])
  @@index([createdAt])
}

// Seller profile for additional seller information
model SellerProfile {
  id                String    @id @default(cuid())
  userId            String    @unique
  displayName       String
  bio               String?
  shippingFrom      String
  processingTime    Int       @default(3) // days
  defaultShippingCost Decimal @default(5) @db.Decimal(10, 2)
  shippingNotes     String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// Payout requests from sellers
model Payout {
  id          String       @id @default(cuid())
  sellerId    String
  amount      Decimal      @db.Decimal(10, 2)
  status      PayoutStatus @default(PENDING)
  method      PayoutMethod @default(BANK_TRANSFER)
  reference   String?      // Bank transfer reference or PayPal transaction ID
  notes       String?      // Admin notes
  requestedAt DateTime     @default(now())
  processedAt DateTime?
  processedBy String?      // Admin who processed the payout

  // Relations
  seller      User         @relation(fields: [sellerId], references: [id], onDelete: Cascade)

  @@index([sellerId])
  @@index([status])
  @@index([requestedAt])
}

// Enums
enum UserRole {
  USER
  ADMIN
  MODERATOR
}

enum UserPreferenceRole {
  BUYER
  SELLER
  BOTH
}

enum Condition {
  NEW_WITH_TAGS
  NEW_WITHOUT_TAGS
  VERY_GOOD
  GOOD
  SATISFACTORY
}

enum ProductStatus {
  AVAILABLE
  SOLD
  RESERVED
  REMOVED
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
  DISPUTED
}

enum ConversationStatus {
  ACTIVE
  ARCHIVED
}

enum NotificationType {
  ORDER
  MESSAGE
  PAYMENT
  SYSTEM
}

enum AddressType {
  SHIPPING
  BILLING
}

enum ReportType {
  PRODUCT
  USER
  MESSAGE
}

enum ReportStatus {
  PENDING
  UNDER_REVIEW
  RESOLVED
  DISMISSED
}

enum PayoutMethod {
  BANK_TRANSFER
  PAYPAL
}

enum PayoutStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

name: Documentation Generator

on:
  push:
    branches: [main]
    paths:
      - 'apps/**/*.ts'
      - 'apps/**/*.tsx'
      - 'packages/**/*.ts'
      - 'packages/**/*.tsx'
      - 'README.md'
      - 'docs/**'
  workflow_dispatch:
  schedule:
    - cron: '0 4 * * 1' # Every Monday at 4 AM

jobs:
  generate-api-docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: '8'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate database types
        run: pnpm db:generate

      - name: Extract API routes documentation
        run: |
          echo "Extracting API routes..."
          
          # Create docs directory if it doesn't exist
          mkdir -p docs/api
          
          # Extract API routes from apps/api and apps/app
          echo "# API Documentation" > docs/api/README.md
          echo "" >> docs/api/README.md
          echo "Auto-generated API documentation from route files." >> docs/api/README.md
          echo "" >> docs/api/README.md
          
          # Find all route files
          find apps/ -name "route.ts" -o -name "route.js" | while read file; do
            echo "Processing $file..."
            
            # Extract route path from file path
            route_path=$(echo "$file" | sed 's|apps/[^/]*/||' | sed 's|/route\.ts||' | sed 's|/route\.js||')
            
            echo "## /$route_path" >> docs/api/README.md
            echo "" >> docs/api/README.md
            
            # Extract exported functions (GET, POST, etc.)
            if grep -q "export.*GET\|export.*POST\|export.*PUT\|export.*DELETE\|export.*PATCH" "$file"; then
              echo "### Available Methods:" >> docs/api/README.md
              grep -E "export.*(GET|POST|PUT|DELETE|PATCH)" "$file" | sed 's/export[[:space:]]*async[[:space:]]*function[[:space:]]*/- /' | sed 's/(.*//' >> docs/api/README.md
              echo "" >> docs/api/README.md
            fi
            
            # Extract JSDoc comments or comments above exports
            if grep -B5 -A1 "export.*function" "$file" | grep -E "//|/\*|\*" > /dev/null; then
              echo "### Description:" >> docs/api/README.md
              grep -B5 -A1 "export.*function" "$file" | grep -E "//|/\*|\*" | head -3 >> docs/api/README.md
              echo "" >> docs/api/README.md
            fi
            
            echo "---" >> docs/api/README.md
            echo "" >> docs/api/README.md
          done

      - name: Generate component documentation
        run: |
          echo "Generating component documentation..."
          
          mkdir -p docs/components
          
          echo "# Component Documentation" > docs/components/README.md
          echo "" >> docs/components/README.md
          echo "Auto-generated component documentation." >> docs/components/README.md
          echo "" >> docs/components/README.md
          
          # Find all component files
          find apps/ -name "*.tsx" -path "*/components/*" | head -20 | while read file; do
            component_name=$(basename "$file" .tsx)
            echo "## $component_name" >> docs/components/README.md
            echo "" >> docs/components/README.md
            
            # Extract props interface if exists
            if grep -q "interface.*Props" "$file"; then
              echo "### Props:" >> docs/components/README.md
              echo '```typescript' >> docs/components/README.md
              grep -A10 "interface.*Props" "$file" | head -15 >> docs/components/README.md
              echo '```' >> docs/components/README.md
              echo "" >> docs/components/README.md
            fi
            
            # Extract component description from comments
            if grep -B3 "export.*function\|export.*const.*=" "$file" | grep -E "//|/\*|\*" > /dev/null; then
              echo "### Description:" >> docs/components/README.md
              grep -B3 "export.*function\|export.*const.*=" "$file" | grep -E "//|/\*|\*" | head -2 >> docs/components/README.md
              echo "" >> docs/components/README.md
            fi
            
            echo "**File:** \`$file\`" >> docs/components/README.md
            echo "" >> docs/components/README.md
            echo "---" >> docs/components/README.md
            echo "" >> docs/components/README.md
          done

      - name: Generate database schema documentation
        run: |
          echo "Generating database schema documentation..."
          
          mkdir -p docs/database
          
          echo "# Database Schema Documentation" > docs/database/README.md
          echo "" >> docs/database/README.md
          echo "Auto-generated from Prisma schema." >> docs/database/README.md
          echo "" >> docs/database/README.md
          
          # Extract models from Prisma schema
          if [ -f "packages/database/prisma/schema.prisma" ]; then
            echo "## Models" >> docs/database/README.md
            echo "" >> docs/database/README.md
            
            # Extract model definitions
            grep -A20 "^model" packages/database/prisma/schema.prisma | while IFS= read -r line; do
              if [[ "$line" =~ ^model ]]; then
                echo "### $line" >> docs/database/README.md
                echo '```prisma' >> docs/database/README.md
              elif [[ "$line" =~ ^\} ]]; then
                echo "$line" >> docs/database/README.md
                echo '```' >> docs/database/README.md
                echo "" >> docs/database/README.md
              elif [[ "$line" =~ ^-- ]]; then
                continue
              else
                echo "$line" >> docs/database/README.md
              fi
            done
          fi

      - name: Generate package documentation
        run: |
          echo "Generating package documentation..."
          
          mkdir -p docs/packages
          
          echo "# Package Documentation" > docs/packages/README.md
          echo "" >> docs/packages/README.md
          echo "Documentation for workspace packages." >> docs/packages/README.md
          echo "" >> docs/packages/README.md
          
          # Document each package
          find packages/ -name "package.json" | while read pkg_file; do
            pkg_dir=$(dirname "$pkg_file")
            pkg_name=$(jq -r '.name' "$pkg_file")
            pkg_desc=$(jq -r '.description // "No description"' "$pkg_file")
            
            echo "## $pkg_name" >> docs/packages/README.md
            echo "" >> docs/packages/README.md
            echo "$pkg_desc" >> docs/packages/README.md
            echo "" >> docs/packages/README.md
            
            # Check for README in package
            if [ -f "$pkg_dir/README.md" ]; then
              echo "### Package README:" >> docs/packages/README.md
              head -10 "$pkg_dir/README.md" >> docs/packages/README.md
              echo "" >> docs/packages/README.md
            fi
            
            # List main exports
            if [ -f "$pkg_dir/index.ts" ]; then
              echo "### Main Exports:" >> docs/packages/README.md
              echo '```typescript' >> docs/packages/README.md
              grep "export" "$pkg_dir/index.ts" | head -10 >> docs/packages/README.md
              echo '```' >> docs/packages/README.md
              echo "" >> docs/packages/README.md
            fi
            
            echo "**Location:** \`$pkg_dir\`" >> docs/packages/README.md
            echo "" >> docs/packages/README.md
            echo "---" >> docs/packages/README.md
            echo "" >> docs/packages/README.md
          done

      - name: Generate deployment documentation
        run: |
          echo "Generating deployment documentation..."
          
          mkdir -p docs/deployment
          
          echo "# Deployment Documentation" > docs/deployment/README.md
          echo "" >> docs/deployment/README.md
          echo "Auto-generated deployment information." >> docs/deployment/README.md
          echo "" >> docs/deployment/README.md
          
          echo "## Applications" >> docs/deployment/README.md
          echo "" >> docs/deployment/README.md
          
          # Document each app
          for app_dir in apps/*; do
            if [ -d "$app_dir" ]; then
              app_name=$(basename "$app_dir")
              echo "### $app_name" >> docs/deployment/README.md
              echo "" >> docs/deployment/README.md
              
              # Extract package.json info
              if [ -f "$app_dir/package.json" ]; then
                app_desc=$(jq -r '.description // "No description"' "$app_dir/package.json")
                echo "$app_desc" >> docs/deployment/README.md
                echo "" >> docs/deployment/README.md
                
                # Extract scripts
                echo "**Available Scripts:**" >> docs/deployment/README.md
                jq -r '.scripts | to_entries[] | "- `\(.key)`: \(.value)"' "$app_dir/package.json" >> docs/deployment/README.md
                echo "" >> docs/deployment/README.md
              fi
              
              # Check for vercel.json
              if [ -f "$app_dir/vercel.json" ]; then
                echo "**Vercel Configuration:** ✅" >> docs/deployment/README.md
                echo "" >> docs/deployment/README.md
              fi
              
              echo "---" >> docs/deployment/README.md
              echo "" >> docs/deployment/README.md
            fi
          done

      - name: Update main README
        run: |
          echo "Updating main README with documentation links..."
          
          # Add documentation section to README if it doesn't exist
          if ! grep -q "## Documentation" README.md; then
            echo "" >> README.md
            echo "## Documentation" >> README.md
            echo "" >> README.md
            echo "- [API Documentation](docs/api/README.md)" >> README.md
            echo "- [Component Documentation](docs/components/README.md)" >> README.md
            echo "- [Database Schema](docs/database/README.md)" >> README.md
            echo "- [Package Documentation](docs/packages/README.md)" >> README.md
            echo "- [Deployment Guide](docs/deployment/README.md)" >> README.md
            echo "" >> README.md
          fi

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "Documentation Bot"

      - name: Commit and push documentation
        run: |
          git add docs/
          git add README.md
          
          if [ -n "$(git status --porcelain)" ]; then
            git commit -m "📚 Auto-update: Generated documentation
            
            - Updated API documentation
            - Refreshed component documentation  
            - Updated database schema docs
            - Refreshed package documentation
            - Updated deployment guide
            
            🤖 Generated with [Claude Code](https://claude.ai/code)
            
            Co-Authored-By: Documentation Bot <action@github.com>"
            
            git push origin main
            echo "Documentation updated successfully!"
          else
            echo "No documentation changes to commit"
          fi

      - name: Create documentation summary
        uses: actions/github-script@v7
        with:
          script: |
            const summary = `## 📚 Documentation Update Summary
            
            The documentation has been automatically updated with the latest changes.
            
            ### Generated Documentation:
            - 📋 **API Documentation**: Updated route information and endpoints
            - 🧩 **Component Documentation**: Refreshed component props and descriptions
            - 🗄️ **Database Schema**: Updated model definitions and relationships
            - 📦 **Package Documentation**: Current workspace package information
            - 🚀 **Deployment Guide**: Updated deployment configurations and scripts
            
            ### Access Documentation:
            - [View API Docs](https://github.com/${context.repo.owner}/${context.repo.repo}/blob/main/docs/api/README.md)
            - [View Component Docs](https://github.com/${context.repo.owner}/${context.repo.repo}/blob/main/docs/components/README.md)
            - [View Database Schema](https://github.com/${context.repo.owner}/${context.repo.repo}/blob/main/docs/database/README.md)
            - [View Package Docs](https://github.com/${context.repo.owner}/${context.repo.repo}/blob/main/docs/packages/README.md)
            - [View Deployment Guide](https://github.com/${context.repo.owner}/${context.repo.repo}/blob/main/docs/deployment/README.md)
            
            ---
            *Documentation automatically generated by GitHub Actions*`;
            
            // Create a commit comment with the summary
            const commits = await github.rest.repos.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 1
            });
            
            if (commits.data.length > 0) {
              await github.rest.repos.createCommitComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                commit_sha: commits.data[0].sha,
                body: summary
              });
            }
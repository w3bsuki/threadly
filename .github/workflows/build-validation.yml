name: Build Validation & Pre-deployment Checks

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}

jobs:
  lint-and-type-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.13.1

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma client
        env:
          DATABASE_URL: "postgresql://mock:mock@localhost:5432/mock"
        run: pnpm db:generate

      - name: Lint
        run: pnpm lint

      - name: Type check
        run: pnpm typecheck

  build-apps:
    runs-on: ubuntu-latest
    needs: lint-and-type-check
    strategy:
      matrix:
        app: [web, app]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.13.1

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma client
        env:
          DATABASE_URL: "postgresql://mock:mock@localhost:5432/mock"
        run: pnpm db:generate

      - name: Build ${{ matrix.app }}
        run: pnpm build --filter=${{ matrix.app }}
        env:
          # Mock environment variables for build
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: "pk_test_mock"
          CLERK_SECRET_KEY: "sk_test_mock"
          DATABASE_URL: "postgresql://mock:mock@localhost:5432/mock"
          REDIS_URL: "redis://localhost:6379"
          UPSTASH_REDIS_REST_URL: "https://mock.upstash.io"
          UPSTASH_REDIS_REST_TOKEN: "mock_token"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.app }}
          path: |
            apps/${{ matrix.app }}/.next/
            apps/${{ matrix.app }}/dist/
          retention-days: 1

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

  dependency-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.13.1

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Audit dependencies
        run: pnpm audit --audit-level high

      - name: Check for outdated dependencies
        run: pnpm outdated || true

  database-validation:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: threadly_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.13.1

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Validate Prisma schema
        env:
          DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/threadly_test"
        run: |
          cd packages/database
          npx prisma validate

      - name: Run migrations
        env:
          DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/threadly_test"
        run: |
          cd packages/database
          npx prisma migrate deploy

      - name: Generate Prisma client
        env:
          DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/threadly_test"
        run: |
          cd packages/database
          npx prisma generate

      - name: Seed test data
        env:
          DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/threadly_test"
        run: |
          cd packages/database
          npx prisma db seed || echo "No seed script found"

  performance-check:
    runs-on: ubuntu-latest
    needs: build-apps
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-web
          path: apps/web/

      - name: Bundle size analysis
        run: |
          # Check bundle sizes
          if [ -d "apps/web/.next" ]; then
            find apps/web/.next -name "*.js" -type f -exec wc -c {} + | sort -n | tail -10
          fi

      - name: Setup Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x

      - name: Lighthouse CI
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
        run: |
          # Mock Lighthouse CI run (would need actual deployment URL)
          echo "Would run Lighthouse CI against staging deployment"

  deployment-readiness:
    runs-on: ubuntu-latest
    needs: [lint-and-type-check, build-apps, security-scan, dependency-check, database-validation]
    if: always()
    steps:
      - name: Check deployment readiness
        run: |
          echo "=== Deployment Readiness Report ==="
          echo "Lint & Type Check: ${{ needs.lint-and-type-check.result }}"
          echo "Build Apps: ${{ needs.build-apps.result }}"
          echo "Security Scan: ${{ needs.security-scan.result }}"
          echo "Dependency Check: ${{ needs.dependency-check.result }}"
          echo "Database Validation: ${{ needs.database-validation.result }}"
          
          # Check if all jobs passed
          if [[ "${{ needs.lint-and-type-check.result }}" == "success" && \
                "${{ needs.build-apps.result }}" == "success" && \
                "${{ needs.security-scan.result }}" == "success" && \
                "${{ needs.dependency-check.result }}" == "success" && \
                "${{ needs.database-validation.result }}" == "success" ]]; then
            echo "‚úÖ All checks passed - Ready for deployment"
            echo "ready-for-deployment=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Some checks failed - NOT ready for deployment"
            echo "ready-for-deployment=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const readyForDeployment = '${{ steps.check-deployment-readiness.outputs.ready-for-deployment }}' === 'true';
            const status = readyForDeployment ? '‚úÖ Ready for deployment' : '‚ùå Not ready for deployment';
            
            const comment = `## Deployment Readiness Check
            
            ${status}
            
            ### Check Results:
            - **Lint & Type Check**: ${{ needs.lint-and-type-check.result }}
            - **Build Apps**: ${{ needs.build-apps.result }}
            - **Security Scan**: ${{ needs.security-scan.result }}
            - **Dependency Check**: ${{ needs.dependency-check.result }}
            - **Database Validation**: ${{ needs.database-validation.result }}
            
            ${readyForDeployment ? 
              'üöÄ This PR is ready to be merged and deployed!' : 
              '‚ö†Ô∏è Please fix the failing checks before deploying.'}
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
name: Threadly CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 */6 * * *'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
  NODE_VERSION: '20'
  PNPM_VERSION: '10.13.1'

jobs:
  lint-and-typecheck:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma client
        env:
          DATABASE_URL: postgresql://localhost:5432/mock
        run: pnpm db:generate

      - name: Lint
        run: pnpm lint

      - name: Type check
        run: pnpm typecheck

  test:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma client
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test
        run: pnpm db:generate

      - name: Run database migrations
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test
        run: pnpm db:push

      - name: Run tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test
        run: pnpm test

  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [lint-and-typecheck, test]
    strategy:
      matrix:
        app: [web, app, api]
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma client
        env:
          DATABASE_URL: postgresql://localhost:5432/mock
        run: pnpm db:generate

      - name: Build ${{ matrix.app }}
        run: pnpm build --filter=${{ matrix.app }}
        env:
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
          CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
          DATABASE_URL: postgresql://localhost:5432/mock
          REDIS_URL: redis://localhost:6379
          UPSTASH_REDIS_REST_URL: https://mock-redis.upstash.io
          UPSTASH_REDIS_REST_TOKEN: mock-token
          NEXTAUTH_SECRET: mock-secret
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    timeout-minutes: 10
    strategy:
      matrix:
        app: [web, app, api]
      fail-fast: false
    steps:
      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID_${{ matrix.app }} }}
          vercel-args: '--prod'
          working-directory: apps/${{ matrix.app }}

  health-check:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    timeout-minutes: 5
    strategy:
      matrix:
        app: [web, app, api]
    steps:
      - name: Wait for deployment
        run: sleep 30

      - name: Health check
        run: |
          case "${{ matrix.app }}" in
            web) URL="https://threadly.vercel.app" ;;
            app) URL="https://app.threadly.vercel.app" ;;
            api) URL="https://api.threadly.vercel.app/health" ;;
          esac
          
          for i in {1..5}; do
            if curl -f -s "$URL" > /dev/null; then
              echo "‚úÖ ${{ matrix.app }} is healthy"
              exit 0
            fi
            echo "‚è≥ Attempt $i/5 failed, waiting 10s..."
            sleep 10
          done
          echo "‚ùå ${{ matrix.app }} health check failed"
          exit 1

  notification:
    runs-on: ubuntu-latest
    needs: [health-check]
    if: always() && github.ref == 'refs/heads/main'
    steps:
      - name: Deployment status
        run: |
          if [ "${{ needs.health-check.result }}" == "success" ]; then
            echo "üéâ All deployments successful"
          else
            echo "‚ùå Deployment failed - check logs"
            exit 1
          fi